<!-- <!DOCTYPE html>
<html>
    <head>
        <script src = 'urlParameters.js'></script>
        <script async type = "module">
            const { jml, jml_nester } = await import('./jml.mjs');

            let params = getURLParameters();
            
            if (!params.type || !params.id) {
                console.log('Missing parameters'); 
            } else {
                let dir = `../archives/${params.type}/${params.id}`;
                console.log(dir);

                init(dir, params.ts);
            }

            function renderMessageText(message) {
                if (message.blocks) {
                    try {
                        const blocks = [];
                        for (const block of message.blocks) {
                            const elements = [];
                            if (!block.elements) {
                                console.log('Block has no elements', block);
                                return [];
                            }
                            for (const element of block.elements) {
                                const subElements = [];
                                for (const subElement of element.elements) {
                                    var content = '';
                                    switch (subElement.type) {
                                        case 'emoji':
                                            if (subElement.unicode) {
                                                for (const e of subElement.unicode.split('-')) {
                                                    content += String.fromCodePoint('0x' + e);
                                                }
                                            } else {
                                                content = subElement.name;
                                            }
                                            break;
                                        case 'text':
                                            content = subElement.text;
                                    }
                                    subElements.push(jml('span', { class: 'element_element ' + subElement.type }, content));
                                }
                                elements.push(jml('span', { class: 'block_element ' + element.type }, subElements));
                            }
                            blocks.push(jml('span', { class: 'message_block' }, elements))
                        }
        
                        return blocks;
    
                    } catch(err) {
                        console.error(err);
                        console.log(message);
                    }
                }

                return [ jml('span', {}, message.text) ];
            }

            function renderMessageFiles(message) { 
                if (!message.files) return;

                const result = [];

                for (const file of message.files) {
                    if (!file.permalink) {
                        console.log('File missing permalink', file);
                        continue;
                    }

                    let filename = file.permalink.split('/').pop();
                    var path = `../archives/${params.type}/${params.id}/files/${file.id}/${filename}`;

                    if (file.mimetype && file.mimetype.startsWith('image/')) {
                        result.push(jml('img', { src: path }));
                    }
                }

                return result;
            }

            function renderMessage([message, members], newGroup) {
                if (!message.type === 'message') return;

                var className = 'message_container';
                if (!newGroup) className += ' is_sequel';
                if (message.edited) className += ' is_edited';

                let date = getDate(message.ts);

                var user;
                if (message.subtype && message.subtype === "bot_message") {
                    user = members.find(m => m.profile && m.profile['api_app_id'] && m.profile['api_app_id'] === message['app_id']);
                } else if (members.find(m => m.id === message.user)) {
                    user = members.find(m => m.id === message.user);
                } else {
                    user = "???";
                }

                var content = renderMessageText(message);
                if (message.files) {
                    content.push(jml('figure', { class: 'message_files' }, renderMessageFiles(message)));
                }
                if (message.edited) {
                    content.push(jml('span', { class: 'message_editTag' }, '(edited)'));
                }
                
                return jml('tr', { id: message.user, class: className }, [
                    jml('td', { class: 'message_ts' }, getDateString(date)),
                    jml('td', { class: 'message_user' }, newGroup ? getPrettyName(user) : ''),
                    jml('td', { class: 'message_content' }, content),
                ])
            }

            async function init(dir, ts) {
                const { info, members, messages, threads } = await import(dir + '/data.mjs');

                if (info()['is_im'] && info().user) {
                    let mem = members().find(member => member.id === info().user);
                    
                    setTitle('@' + mem.name);
                    document.querySelector('#channelTitle').innerHTML = getPrettyName(mem);   
                } else {
                    setTitle('#' + info().name);
                    document.querySelector('#channelTitle').innerHTML = info().name;
                    document.querySelector('#channelInfo').innerHTML = info().purpose.value.replace('\n', '<br>');    
                }

                for (var i = messages().length - 1; i >= 0; i--) {
                    let newGroup = (!messages()[i+1] || messages()[i].user !== messages()[i+1].user);
                    document.querySelector('#messages').appendChild(renderMessage([messages()[i], members()], newGroup));
                }
                
                // for (const memberNode of memberUI(members())) {
                //     document.querySelector('#members').appendChild(memberNode);
                // }

            }

        </script>
        <link rel="stylesheet" href="main.css">
    </head>
    <body>
        <h1>THIS WORKS!</h1>
        <div id = 'members'></div>
        <h1 id = 'channelTitle'></h1>
        <h3 id = 'channelInfo'></h3>
        <div class = 'container'>
            <table id = 'messages'></table>
        </div>
    </body>
</html> -->